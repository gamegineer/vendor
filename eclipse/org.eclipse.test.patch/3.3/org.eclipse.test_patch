### Eclipse Workspace Patch 1.0
#P org.eclipse.test
Index: META-INF/MANIFEST.MF
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.test/META-INF/MANIFEST.MF,v
retrieving revision 1.5
diff -u -r1.5 MANIFEST.MF
--- META-INF/MANIFEST.MF	25 Apr 2007 18:02:27 -0000	1.5
+++ META-INF/MANIFEST.MF	2 Nov 2007 19:26:50 -0000
@@ -7,10 +7,10 @@
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Require-Bundle: org.apache.ant,
- org.junit,
  org.eclipse.ui,
  org.eclipse.core.runtime,
  org.eclipse.ui.ide.application,
- org.eclipse.equinox.app
+ org.eclipse.equinox.app,
+ org.junit
 Eclipse-LazyStart: true
 Bundle-RequiredExecutionEnvironment: J2SE-1.4
Index: src/org/eclipse/test/UITestApplication.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.test/src/org/eclipse/test/UITestApplication.java,v
retrieving revision 1.12
diff -u -r1.12 UITestApplication.java
--- src/org/eclipse/test/UITestApplication.java	6 Jun 2007 18:13:19 -0000	1.12
+++ src/org/eclipse/test/UITestApplication.java	2 Nov 2007 19:26:51 -0000
@@ -33,7 +33,7 @@
  * A Workbench that runs a test suite specified in the
  * command line arguments.
  */ 
-public class UITestApplication  implements IPlatformRunnable, ITestHarness, IApplication {
+public class UITestApplication implements ITestHarness {
 
 	private static final String DEFAULT_APP_3_0 = "org.eclipse.ui.ide.workbench"; //$NON-NLS-1$
 	private static final String DEFAULT_APP_PRE_3_0 = "org.eclipse.ui.workbench"; //$NON-NLS-1$
@@ -43,11 +43,8 @@
 	private int fTestRunnerResult = -1;
 	private IApplicationContext appContext;
 	
-	
-	/* (non-Javadoc)
-	 * @see org.eclipse.core.boot.IPlatformRunnable
-	 */
-	public Object run(final Object args) throws Exception {
+
+	public Object run(String[] args) throws Exception {
 		// Get the application to test
 		Object application = getApplication((String[])args);
 		Assert.assertNotNull(application);
@@ -200,21 +197,6 @@
 		});
 		fTestableObject.testingFinished();
 	}
-
-
-	public Object start(IApplicationContext context) throws Exception {
-		this.appContext = context;
-		String[] args = (String[]) appContext.getArguments().get("application.args");
-		if (args == null)
-			args = new String[0];
-		return run(args);
-	}
-
-
-	public void stop() {
-		// TODO Auto-generated method stub
-		
-	}
 	
 }
 
Index: src/org/eclipse/test/CoreTestApplication.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.test/src/org/eclipse/test/CoreTestApplication.java,v
retrieving revision 1.10
diff -u -r1.10 CoreTestApplication.java
--- src/org/eclipse/test/CoreTestApplication.java	6 Jun 2007 18:13:19 -0000	1.10
+++ src/org/eclipse/test/CoreTestApplication.java	2 Nov 2007 19:26:50 -0000
@@ -10,77 +10,22 @@
  *******************************************************************************/
 package org.eclipse.test;
 
+
 import java.io.IOException;
-import org.eclipse.core.runtime.IPlatformRunnable;
-import org.eclipse.core.runtime.Platform;
 
 /**
- * A an application that launches tests once it is started.
+ * An application that launches tests using the EclipseTestRunner.
  */
-public class CoreTestApplication implements IPlatformRunnable {
-	/** true if workspace tests should log their deltas */
-	private static boolean deltas= false;
+public class CoreTestApplication {
 	
 	/**
 	 * Runs a set of tests as defined by the given command line args.
-	 * This is the platform application entry point.
-	 * @see IPlatformRunnable
 	 */
-	public Object run(Object arguments) throws Exception {
-		String[] args= Platform.getCommandLineArgs();//getCommand//processCommandLine((String[]) arguments);
+	public Object run(String[] args) throws Exception {
 		return new Integer(runTests(args));
 	}
 
 	protected int runTests(String[] args) throws IOException {
 		return EclipseTestRunner.run(args);
 	}
-
-	public static boolean deltasEnabled() {
-		return deltas;
-	}
-		
-	protected String[] processCommandLine(String[] args) {
-		int[] configArgs = new int[100];
-		configArgs[0] = -1; // need to initialize the first element to something that could not be an index.
-		int configArgIndex = 0;
-		for (int i = 0; i < args.length; i++) {
-			boolean found = false;
-			// check for args without parameters (i.e., a flag arg)
-			// see if we should be logging deltas
-			if (args[i].equalsIgnoreCase("-deltas")) {
-				found = true;
-				deltas = true;
-			}
-			if (found) {
-				configArgs[configArgIndex++] = i;
-				continue;
-			}
-	
-			// check for args with parameters
-			if (i == args.length - 1 || args[i + 1].startsWith("-")) {
-				continue;
-			}
-			++i;
-
-			// done checking for args.  Remember where an arg was found 
-			if (found) {
-				configArgs[configArgIndex++] = i - 1;
-				configArgs[configArgIndex++] = i;
-			}
-		}
-	
-		//remove all the arguments consumed by this argument parsing
-		if (configArgIndex == 0)
-			return args;
-		String[] passThruArgs = new String[args.length - configArgIndex];
-		configArgIndex = 0;
-		int j = 0;
-		for (int i = 0; i < args.length; i++) {
-			if (i == configArgs[configArgIndex])
-				configArgIndex++;
-			else
-				passThruArgs[j++] = args[i];
-		}
-		return passThruArgs;
-	}
 }
Index: src/org/eclipse/test/EclipseTestRunner.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.test/src/org/eclipse/test/EclipseTestRunner.java,v
retrieving revision 1.19
diff -u -r1.19 EclipseTestRunner.java
--- src/org/eclipse/test/EclipseTestRunner.java	6 Jun 2007 18:13:19 -0000	1.19
+++ src/org/eclipse/test/EclipseTestRunner.java	2 Nov 2007 19:26:51 -0000
@@ -10,37 +10,16 @@
  *******************************************************************************/
 package org.eclipse.test;
 
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Dictionary;
-import java.lang.reflect.Modifier;
-import java.util.Enumeration;
-import java.util.Hashtable;
-import java.util.Properties;
-import java.util.Vector;
-
-import junit.framework.AssertionFailedError;
-import junit.framework.Test;
-import junit.framework.TestListener;
-import junit.framework.TestResult;
-import junit.framework.TestSuite;
-
+import java.io.*;
+import java.util.*;
+import junit.framework.*;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter;
 import org.apache.tools.ant.taskdefs.optional.junit.JUnitTest;
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.osgi.util.ManifestElement;
-import org.osgi.framework.Bundle;
-import org.osgi.framework.BundleException;
-import org.osgi.framework.Constants;
+import org.osgi.framework.*;
 
 /**
  * A TestRunner for JUnit that supports Ant JUnitResultFormatters
@@ -73,7 +52,7 @@
      */
     public static final int ERRORS= 2;
     
-    private static final String SUITE_METHODNAME= "suite";	
+    protected static final String SUITE_METHODNAME= "suite";	
 	/**
 	 * The current test result
 	 */
@@ -85,7 +64,7 @@
 	/**
      * The corresponding testsuite.
      */
-    private Test fSuite;
+    private Test testClass;
     /**
      * Formatters from the command line.
      */
@@ -207,17 +186,14 @@
         return runner.getRetCode();
 	}
 
-    /**
-     *   
-     */
     public EclipseTestRunner(JUnitTest test, String testPluginName, boolean haltOnError, boolean haltOnFailure) {
         fJunitTest= test;
         fTestPluginName= testPluginName;
         fHaltOnError= haltOnError;
         fHaltOnFailure= haltOnFailure;
-        
+         
         try {
-            fSuite= getTest(test.getName());
+            testClass= getTest(test.getName());
         } catch(Exception e) {
             fRetCode = ERRORS;
             fException = e;
@@ -228,56 +204,27 @@
 	 * Returns the Test corresponding to the given suite. 
 	 */
 	protected Test getTest(String suiteClassName) throws TestFailedException {
-		if (suiteClassName.length() <= 0) {
-			clearStatus();
+		Bundle bundle = Platform.getBundle("org.junit");
+		if (bundle == null)
 			return null;
-		}
-		Class testClass= null;
-		try {
-			testClass= loadSuiteClass(suiteClassName);
-		} catch (ClassNotFoundException e) {
-		    if (e.getCause() != null) {
-		        runFailed(e.getCause());
-		    }
-			String clazz= e.getMessage();
-			if (clazz == null) 
-				clazz= suiteClassName;
-			runFailed("Class not found \""+clazz+"\"");
+		String bundleVersion = (String) bundle.getHeaders().get(Constants.BUNDLE_VERSION);
+		if (bundleVersion == null)
 			return null;
-		} catch(Exception e) {
-		    runFailed(e);
-			return null;
-		}
-		Method suiteMethod= null;
+		Version version;
 		try {
-			suiteMethod= testClass.getMethod(SUITE_METHODNAME, new Class[0]);
-	 	} catch(Exception e) {
-	 		// try to extract a test suite automatically
-			clearStatus();			
-			return new TestSuite(testClass);
-		}
-	 	if (!Modifier.isStatic(suiteMethod.getModifiers())) {
-	 		runFailed("suite() method must be static");
-	 		return null;
-	 	}
-		Test test= null;
-		try {
-			test= (Test)suiteMethod.invoke(null, new Class[0]); // static method
-			if (test == null)
-				return test;
-		} 
-		catch (InvocationTargetException e) {
-			runFailed("Failed to invoke suite():" + e.getTargetException().toString());
+			version = Version.parseVersion(bundleVersion);
+		} catch (IllegalArgumentException e) {
+			e.printStackTrace();
 			return null;
 		}
-		catch (IllegalAccessException e) {
-			runFailed("Failed to invoke suite():" + e.toString());
-			return null;
+		switch (version.getMajor()) {
+			case 3 :
+				return EclipseJunit3TestHelper.getTest(this, suiteClassName);
+			default : //assume '4'
+				return EclipseJunit4TestHelper.getTest(this, suiteClassName);
 		}
-		clearStatus();
-		return test;
 	}
-
+	
 	protected void runFailed(String message) throws TestFailedException {
 		System.err.println(message);
 		throw new TestFailedException(message);
@@ -287,22 +234,16 @@
       e.printStackTrace();
       throw new TestFailedException(e);
     }
-
-	protected void clearStatus() {
-	}
-
-	/**
-	 * Loads the class either with the system class loader or a
-	 * plugin class loader if a plugin name was specified
+    
+    /*
+	 * Returns the Bundle specified by testPluginName
 	 */
-	protected Class loadSuiteClass(String suiteClassName) throws ClassNotFoundException {
+    private Bundle getTestBundle() {
 		if (fTestPluginName == null)
-			return Class.forName(suiteClassName);
+			return null;
         Bundle bundle = Platform.getBundle(fTestPluginName);
-        if (bundle == null) {
-            throw new ClassNotFoundException(suiteClassName, new Exception("Could not find plugin \""
-                    + fTestPluginName + "\""));
-        }
+        if (bundle == null)
+        	return null;
         
         //is the plugin a fragment?
 		Dictionary headers = bundle.getHeaders();
@@ -321,6 +262,21 @@
 			bundle = host;
 		} 
 
+        return bundle;
+    }
+
+	/**
+	 * Loads the class either with the system class loader or a
+	 * plugin class loader if a plugin name was specified
+	 */
+	protected Class loadSuiteClass(String suiteClassName) throws ClassNotFoundException {
+		if (fTestPluginName == null)
+			return Class.forName(suiteClassName);
+        Bundle bundle = getTestBundle();
+        if (bundle == null) {
+            throw new ClassNotFoundException(suiteClassName, new Exception("Could not find plugin \""
+                    + fTestPluginName + "\""));
+        }
         return bundle.loadClass(suiteClassName);
 	}
 	
@@ -351,7 +307,7 @@
 
             try {
 //            	pm.snapshot(1); // before
-                fSuite.run(fTestResult);
+            	testClass.run(fTestResult);
             } finally {
  //           	pm.snapshot(2); // after  	
                 fSystemError.close();
Index: build.properties
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.test/build.properties,v
retrieving revision 1.9
diff -u -r1.9 build.properties
--- build.properties	6 Jun 2007 18:13:19 -0000	1.9
+++ build.properties	2 Nov 2007 19:26:50 -0000
@@ -19,4 +19,5 @@
                runtests*,\
                test.xml,\
                *.html,\
-               META-INF/
+               META-INF/,\
+               src/
Index: library.xml
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.test/library.xml,v
retrieving revision 1.30
diff -u -r1.30 library.xml
--- library.xml	8 Mar 2007 18:00:12 -0000	1.30
+++ library.xml	2 Nov 2007 19:26:50 -0000
@@ -48,13 +48,13 @@
 	
 	<target name="core-test" description="Eclipse application used to launch HEADLESS plugin tests." depends="init">
 		<antcall target="${launchTarget}">
-			<param name="application" value="org.eclipse.test.coretestapplication"/>
+			<param name="application" value="org.eclipse.test.dispatcher.coretestapplication"/>
 		</antcall>
 	</target>
 	
 	<target name="ui-test" description="Eclipse application used to launch UI plugin tests." depends="init">
 		<antcall target="${launchTarget}">
-			<param name="application" value="org.eclipse.test.uitestapplication"/>
+			<param name="application" value="org.eclipse.test.dispatcher.uitestapplication"/>
 		</antcall>
 	</target>
 
Index: plugin.xml
===================================================================
RCS file: plugin.xml
diff -N plugin.xml
--- plugin.xml	24 Aug 2006 13:41:47 -0000	1.17
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?eclipse version="3.0"?>
-<plugin>
-     <extension
-         id="coretestapplication"
-         point="org.eclipse.core.runtime.applications">
-      <application>
-         <run
-               class="org.eclipse.test.CoreTestApplication">
-         </run>
-      </application>
-   </extension>
-   <extension
-         id="uitestapplication"
-         point="org.eclipse.core.runtime.applications">
-      <application>
-         <run
-               class="org.eclipse.test.UITestApplication">
-            <parameter
-                  name="productInfo"
-                  value="product.ini">
-            </parameter>
-         </run>
-      </application>
-   </extension>
-
-</plugin>
Index: src/org/eclipse/test/EclipseJunit3TestHelper.java
===================================================================
RCS file: src/org/eclipse/test/EclipseJunit3TestHelper.java
diff -N src/org/eclipse/test/EclipseJunit3TestHelper.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/test/EclipseJunit3TestHelper.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,71 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.test;
+
+import java.lang.reflect.*;
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import org.eclipse.test.EclipseTestRunner.TestFailedException;
+
+/**
+ * Helper class for EclipseTestRunner.  Returns at Test object that is compatible with JUnit 3.x.
+ */
+public class EclipseJunit3TestHelper {
+	
+	/**
+	 * Returns the Test corresponding to the given suite. 
+	 */
+	protected static Test getTest(EclipseTestRunner runner, String suiteClassName) throws TestFailedException {
+		if (suiteClassName.length() <= 0) {
+			return null;
+		}
+		Class testClass = null;
+		try {
+			testClass = runner.loadSuiteClass(suiteClassName);
+		} catch (ClassNotFoundException e) {
+			if (e.getCause() != null) {
+				runner.runFailed(e.getCause());
+			}
+			String clazz = e.getMessage();
+			if (clazz == null)
+				clazz = suiteClassName;
+			runner.runFailed("Class not found \"" + clazz + "\"");
+			return null;
+		} catch (Exception e) {
+			runner.runFailed(e);
+			return null;
+		}
+		Method suiteMethod = null;
+		try {
+			suiteMethod = testClass.getMethod(EclipseTestRunner.SUITE_METHODNAME, new Class[0]);
+		} catch (Exception e) {
+			// try to extract a test suite automatically
+			return new TestSuite(testClass);
+		}
+		if (!Modifier.isStatic(suiteMethod.getModifiers())) {
+			runner.runFailed("suite() method must be static");
+			return null;
+		}
+		Test test = null;
+		try {
+			test = (Test) suiteMethod.invoke(null, new Class[0]);
+			if (test == null)
+				return test;
+		} catch (InvocationTargetException e) {
+			runner.runFailed("Failed to invoke suite():" + e.getTargetException().toString());
+			return null;
+		} catch (IllegalAccessException e) {
+			runner.runFailed("Failed to invoke suite():" + e.toString());
+			return null;
+		}
+		return test;
+	}
+}
Index: src/org/eclipse/test/EclipseJunit4TestHelper.java
===================================================================
RCS file: src/org/eclipse/test/EclipseJunit4TestHelper.java
diff -N src/org/eclipse/test/EclipseJunit4TestHelper.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/test/EclipseJunit4TestHelper.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,47 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.test;
+
+import junit.framework.JUnit4TestAdapter;
+import junit.framework.Test;
+import org.eclipse.test.EclipseTestRunner.TestFailedException;
+
+/**
+ * Helper class for EclipseTestRunner.  Returns at Test object that is compatible with JUnit 4.x.
+ */
+public class EclipseJunit4TestHelper {
+	/**
+	 * Returns the Test corresponding to the given test class. 
+	 */
+	protected static Test getTest(EclipseTestRunner runner, String testClassName) throws TestFailedException {
+		if (testClassName.length() <= 0) {
+			return null;
+		}
+		Class testClass = null;
+		try {
+			testClass = runner.loadSuiteClass(testClassName);
+		} catch (ClassNotFoundException e) {
+			if (e.getCause() != null) {
+				runner.runFailed(e.getCause());
+			}
+			String clazz = e.getMessage();
+			if (clazz == null)
+				clazz = testClassName;
+			runner.runFailed("Class not found \"" + clazz + "\"");
+			return null;
+		} catch (Exception e) {
+			runner.runFailed(e);
+			return null;
+		}
+		return new JUnit4TestAdapter(testClass);
+	}
+
+}
Index: .settings/org.eclipse.jdt.core.prefs
===================================================================
RCS file: .settings/org.eclipse.jdt.core.prefs
diff -N .settings/org.eclipse.jdt.core.prefs
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ .settings/org.eclipse.jdt.core.prefs	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,12 @@
+#Mon Oct 22 15:58:17 EDT 2007
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.2
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.4
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=warning
+org.eclipse.jdt.core.compiler.source=1.3
